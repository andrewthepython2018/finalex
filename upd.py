import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from datetime import date, timedelta, datetime
import gspread
from google.oauth2.service_account import Credentials
import plotly.graph_objects as go
from decimal import Decimal, ROUND_HALF_UP

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥", layout="wide")

# ID —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ URL –º–µ–∂–¥—É /d/ –∏ /edit)
SPREADSHEET_ID = "1-D2RvWH5WUP00KqA18mAfj3kDOpedMkOwo8UI_Xd_A4"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
try:
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"], scopes=SCOPES
    )
    gc = gspread.authorize(credentials)
    sheet = gc.open_by_key(SPREADSHEET_ID).sheet1
except gspread.SpreadsheetNotFound:
    st.error(
        "‚ùå Google Sheet –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ:\n"
        "1. ID —Ç–∞–±–ª–∏—Ü—ã —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ.\n"
        "2. –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        f"   `{st.secrets['gcp_service_account']['client_email']}`\n"
        "   (–î–æ–±–∞–≤—å –µ–≥–æ –∫–∞–∫ '–†–µ–¥–∞–∫—Ç–æ—Ä' —á–µ—Ä–µ–∑ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è')."
    )
    st.stop()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    st.stop()

# ---------------- –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------
@st.cache_data(ttl=3600)
def fetch_exchange_rates():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      usd, usd_prev ‚Äî —Ç–µ–∫—É—â–∏–π –∏ –≤—á–µ—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å USD‚Üí‚ÇΩ
      uzs, uzs_prev ‚Äî —Ç–µ–∫—É—â–∏–π –∏ –≤—á–µ—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å UZS‚Üí‚ÇΩ –∑–∞ 1 —Å—É–º
      ts            ‚Äî –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¶–ë –∏–ª–∏ now)
    """
    try:
        r = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        d = r.json()
        ts = d.get("Date", None)
        usd = d["Valute"]["USD"]["Value"]
        usd_prev = d["Valute"]["USD"]["Previous"]
        uzs = d["Valute"].get("UZS", {}).get("Value", None)
        uzs_prev = d["Valute"].get("UZS", {}).get("Previous", None)
        return usd, usd_prev, uzs, uzs_prev, ts
    except Exception:
        return None, None, None, None, None

def render_rates_board(usd, usd_prev, uzs, uzs_prev, ts):
    st.markdown("### –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    board = st.container()
    with board:
        c1, c2, c3 = st.columns([1,1,2])
        # USD‚Üí‚ÇΩ
        if usd is not None:
            delta_usd = None if usd_prev is None else (usd - usd_prev)
            c1.metric("USD ‚Üí ‚ÇΩ", f"{usd:.2f} ‚ÇΩ", f"{delta_usd:+.2f} ‚ÇΩ" if delta_usd is not None else None)
        else:
            c1.warning("USD –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # UZS‚Üí‚ÇΩ –∑–∞ 10 000
        if uzs is not None:
            uzs_10k = uzs 
            delta_uzs = None
            if uzs_prev is not None:
                delta_uzs = (uzs - uzs_prev) * 10000
            c2.metric("UZS ‚Üí ‚ÇΩ –∑–∞ 10‚ÄØ000", f"{uzs_10k:.2f} ‚ÇΩ", f"{delta_uzs:+.2f} ‚ÇΩ" if delta_uzs is not None else None)
        else:
            c2.warning("UZS –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            dt = datetime.fromisoformat(ts.replace("Z", "+00:00")) if ts else datetime.now()
            c3.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {dt:%Y-%m-%d %H:%M} (–ø–æ –¥–∞–Ω–Ω—ã–º –¶–ë –†–§)")
        except Exception:
            c3.caption("–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å")
            
def _to_number(x):
    """'64 547,36' / '64547,36' / 64547.36 -> 64547.36"""
    if isinstance(x, (int, float)):
        return float(x)
    if x is None:
        return 0.0
    s = str(x).strip()
    s = s.replace('‚ÇΩ', '').replace('\u00A0', '').replace(' ', '')
    s = s.replace(',', '.')
    try:
        return float(s) if s else 0.0
    except ValueError:
        return 0.0

def load_savings(month_labels):
    # –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—á–∏—Å–ª–∞), –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    rng = f"A2:B{1 + len(month_labels)}"
    values = sheet.get_values(rng, value_render_option='UNFORMATTED_VALUE')

    data = {m: 0.0 for m in month_labels}
    for row in values:
        if not row:
            continue
        m = row[0] if len(row) > 0 else None
        v = row[1] if len(row) > 1 else 0.0

        # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á–∏—Å–ª–æ ‚Äî –±–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å; –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º
        if isinstance(v, (int, float)):
            data[m] = float(v)
        else:
            data[m] = _to_number(v)

    return data

def save_savings(data):
    rows = [["–ú–µ—Å—è—Ü", "–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)"]]
    for m, v in data.items():
        rows.append([m, round(float(v), 2)])  # —á–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞
    sheet.clear()
    sheet.update(rows, value_input_option='RAW')

def recalculate_progress(goal_rub, start_capital, monthly_plan_rub, start_date):
    pie_labels = list(st.session_state.savings_by_month.keys())
    pie_values = list(st.session_state.savings_by_month.values())
    accumulated = start_capital + sum(pie_values)
    remaining_to_goal = max(0, goal_rub - accumulated)
    estimated_months = int(remaining_to_goal / monthly_plan_rub) if monthly_plan_rub else 1
    estimated_finish_date = start_date + timedelta(days=estimated_months * 30)
    percent_complete = accumulated / goal_rub * 100 if goal_rub else 0
    return pie_labels, pie_values, accumulated, remaining_to_goal, estimated_finish_date, percent_complete

# ---------------- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------------
def main():
    st.title("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥")

    usd, usd_prev, uzs, uzs_prev, ts = fetch_exchange_rates()
    if usd is None or uzs is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        return

    # ‚úÖ –í–µ—Ä—Ö–Ω–µ–µ —Ç–∞–±–ª–æ —Å –∫—É—Ä—Å–∞–º–∏
    render_rates_board(usd, usd_prev, uzs, uzs_prev, ts)
    st.divider()

    # –í–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.header("–í–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    usd_saved = st.sidebar.number_input("–ù–∞–∫–æ–ø–ª–µ–Ω–æ (USD)", value=12000.0)
    uzs_saved = st.sidebar.number_input("–ù–∞–∫–æ–ø–ª–µ–Ω–æ (UZS)", value=51000000.0)
    goal_rub = st.sidebar.number_input("–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–ª—å (‚ÇΩ)", value=4498000.0)
    monthly_plan_rub = st.sidebar.number_input("–ü–ª–∞–Ω –≤ –º–µ—Å—è—Ü (‚ÇΩ)", value=271634.0)
    start_date = st.sidebar.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", value=date(2025, 7, 13))

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    rub_from_usd = usd_saved * usd
    rub_from_uzs = (uzs_saved * uzs) / 10000  # UZS‚Üí‚ÇΩ –∑–∞ 10k —É—á—Ç—ë–Ω
    start_capital = rub_from_usd + rub_from_uzs

    # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
    left, right = st.columns(2)
    with left:
        st.markdown("#### –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
        st.write(f"**USD:** {usd_saved:,.0f} $")
        st.write(f"**UZS:** {uzs_saved:,.0f} —Å—É–º")
    with right:
        st.markdown("#### –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª–∏")
        st.write(f"–ò–∑ USD: {rub_from_usd:,.2f} ‚ÇΩ")
        st.write(f"–ò–∑ UZS: {rub_from_uzs:,.2f} ‚ÇΩ")
        st.write(f"**–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª:** {start_capital:,.2f} ‚ÇΩ")

    # –ú–µ—Å—è—Ü—ã
    month_labels = [(start_date + timedelta(days=30 * i)).strftime('%B %Y') for i in range(12)]
    if "savings_by_month" not in st.session_state:
        st.session_state.savings_by_month = load_savings(month_labels)

    # üîÑ –î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É ‚Äî –∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
    pie_labels, pie_values, accumulated, remaining_to_goal, finish_date, percent_complete = recalculate_progress(
        goal_rub, start_capital, monthly_plan_rub, start_date
    )
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü—ã —Å –≤–∫–ª–∞–¥–æ–º > 0
    active_labels = [m for m, v in zip(pie_labels, pie_values) if v > 0]
    active_values = [v for v in pie_values if v > 0]

    fig_pie = px.pie(
        names=["–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"] + active_labels + ["–û—Å—Ç–∞—Ç–æ–∫"],
        values=[start_capital] + active_values + [remaining_to_goal],
        title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
        hole=0.4
    )
    st.plotly_chart(fig_pie, use_container_width=True)

    # –ë–´–°–¢–†–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("–¶–µ–ª—å", f"{goal_rub:,.0f} ‚ÇΩ")
    c2.metric("–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤—Å–µ–≥–æ", f"{accumulated:,.0f} ‚ÇΩ")
    c3.metric("–û—Å—Ç–∞–ª–æ—Å—å", f"{remaining_to_goal:,.0f} ‚ÇΩ")
    c4.metric("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", f"{percent_complete:.2f} %")
    st.caption(f"–û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {finish_date.strftime('%d.%m.%Y')}")

    # --- —Ñ–∞–∫—Ç –ø–æ –º–µ—Å—è—Ü–∞–º: –ø—Ä—è–º–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –ë–ï–ó –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è ---
    fact_by_month = [float(st.session_state.savings_by_month.get(m, 0.0)) for m in month_labels]
    
    st.markdown("### –§–∞–∫—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º")
    fig_lines = go.Figure()
    
    fig_lines.add_trace(go.Scatter(
        x=month_labels,
        y=fact_by_month,                 # <‚Äî –±–µ–∑ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        name="–§–∞–∫—Ç (–∑–∞ –º–µ—Å—è—Ü)",
        mode="lines+markers"
    ))
    
    # –ø—É–Ω–∫—Ç–∏—Ä ‚Äî –ø–ª–∞–Ω –≤ –º–µ—Å—è—Ü 271 634 ‚ÇΩ
    fig_lines.add_hline(
        y=271634,
        line_dash="dot",
        annotation_text="–ü–ª–∞–Ω –≤ –º–µ—Å—è—Ü 271 634 ‚ÇΩ",
        annotation_position="top left"
    )
    
    # —à–∫–∞–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
    fig_lines.update_yaxes(range=[0, 600000], title_text="‚ÇΩ")
    fig_lines.update_xaxes(title_text="–ú–µ—Å—è—Ü")
    
    st.plotly_chart(fig_lines, use_container_width=True)

    # –°–±—Ä–æ—Å
    with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"):
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"):
            st.session_state.savings_by_month = {m: 0 for m in month_labels}
            save_savings(st.session_state.savings_by_month)
            st.success("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
    with st.form("add_savings_form"):
        col1, col2, col3, col4 = st.columns(4)
        input_usd = col1.number_input("USD", min_value=0.0, value=0.0)
        input_uzs = col2.number_input("UZS", min_value=0.0, value=0.0, step=10000.0)
        input_rub = col3.number_input("RUB", min_value=0.0, value=0.0, step=1000.0)
        selected_month = col4.selectbox("–ú–µ—Å—è—Ü", month_labels)
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
    if submitted:
        usd_dec = Decimal(str(usd))
        uzs_dec = Decimal(str(uzs))
        rub_dec = Decimal(str(input_rub))
        usd_in_rub = Decimal(str(input_usd)) * usd_dec
        uzs_in_rub = Decimal(str(input_uzs)) * uzs_dec  # uzs = ‚ÇΩ –∑–∞ 1 —Å—É–º (–∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¶–ë)
        
        added_total_dec = rub_dec + usd_in_rub + uzs_in_rub
        # –æ–∫—Ä—É–≥–ª–∏–º –¥–æ –∫–æ–ø–µ–µ–∫, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ float
        added_total = float(added_total_dec.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))
        st.session_state.savings_by_month[selected_month] += added_total
        save_savings(st.session_state.savings_by_month)
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_total:,.2f} ‚ÇΩ –≤ {selected_month}")

        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        pie_labels, pie_values, accumulated, remaining_to_goal, finish_date, percent_complete = recalculate_progress(
            goal_rub, start_capital, monthly_plan_rub, start_date
        )
        active_labels = [m for m, v in zip(pie_labels, pie_values) if v > 0]
        active_values = [v for v in pie_values if v > 0]
        fig_pie = px.pie(
            names=["–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"] + active_labels + ["–û—Å—Ç–∞—Ç–æ–∫"],
            values=[start_capital] + active_values + [remaining_to_goal],
            title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)",
            hole=0.4
        )
        st.plotly_chart(fig_pie, use_container_width=True)

    # –¢–∞–±–ª–∏—Ü–∞
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π")
    df = pd.DataFrame({
        "–ú–µ—Å—è—Ü": month_labels,
        "–ü–ª–∞–Ω (‚ÇΩ)": [monthly_plan_rub] * len(month_labels),
        "–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)": [st.session_state.savings_by_month[m] for m in month_labels]
    })
    st.dataframe(df.style.format({"–ü–ª–∞–Ω (‚ÇΩ)": "{:.2f}", "–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)": "{:.2f}"}), use_container_width=True)

if __name__ == "__main__":
    main()
