import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
from datetime import datetime, date, timedelta
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥", layout="wide")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç ---
def fetch_exchange_rates():
    try:
        response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
        data = response.json()
        usd = data['Valute']['USD']['Value']
        uzs = data['Valute'].get('UZS', {}).get('Value', None)
        return usd, uzs
    except:
        return None, None

# --- –ë–ª–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç ---
def display_exchange_rates(usd_rate, uzs_rate):
    st.subheader("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (USD ‚Üí ‚ÇΩ)", f"{usd_rate:.2f} ‚ÇΩ")
    with col2:
        if uzs_rate:
            st.metric("–ö—É—Ä—Å —Å—É–º–∞ (UZS ‚Üí ‚ÇΩ –∑–∞ 10,000)", f"{uzs_rate:.6f} ‚ÇΩ")
        else:
            st.warning("–ö—É—Ä—Å —Å—É–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

def recalculate_progress(goal_rub, start_capital, monthly_plan_rub, start_date):
    pie_labels = list(st.session_state.savings_by_month.keys())
    pie_values = list(st.session_state.savings_by_month.values())
    accumulated = start_capital + sum(pie_values)
    remaining_to_goal = max(0, goal_rub - accumulated)
    estimated_months = int(remaining_to_goal / monthly_plan_rub) if monthly_plan_rub else 1
    estimated_finish_date = start_date + timedelta(days=estimated_months * 30)
    percent_complete = accumulated / goal_rub * 100 if goal_rub else 0
    return pie_labels, pie_values, accumulated, remaining_to_goal, estimated_finish_date, percent_complete

def main():
    st.title("\U0001F4B0 –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥")

    usd_rate, uzs_rate = fetch_exchange_rates()
    if usd_rate is None or uzs_rate is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
        return

    # --- –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
    st.sidebar.header("–í–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    usd_saved = st.sidebar.number_input("–ù–∞–∫–æ–ø–ª–µ–Ω–æ (USD)", value=12000.0)
    uzs_saved = st.sidebar.number_input("–ù–∞–∫–æ–ø–ª–µ–Ω–æ (UZS)", value=51000000.0)
    goal_rub = st.sidebar.number_input("–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ (‚ÇΩ)", value=4498000.0)
    monthly_plan_rub = st.sidebar.number_input("–¶–µ–ª—å –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –≤ –º–µ—Å—è—Ü (‚ÇΩ)", value=271634.0)
    monthly_plan_usd = st.sidebar.number_input("–¶–µ–ª—å –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –≤ –º–µ—Å—è—Ü ($)", value=3528.0)
    start_date = st.sidebar.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", value=date(2025, 7, 13))

        # --- –ë–ª–æ–∫ —Å –∫—É—Ä—Å–∞–º–∏ ---
    display_exchange_rates(usd_rate, uzs_rate)

    # --- –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª–∏ ---
    rub_from_usd = usd_saved * usd_rate
    rub_from_uzs = (uzs_saved * uzs_rate) / 10000
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
        st.write(f"**USD:** {usd_saved:,.0f} USD")
        st.write(f"**UZS:** {uzs_saved:,.0f} UZS")
    with col2:
        st.markdown("### –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª–∏")
        st.write(f"–ò–∑ USD: {rub_from_usd:,.2f} ‚ÇΩ")
        st.write(f"–ò–∑ UZS: {rub_from_uzs:,.2f} ‚ÇΩ")

    start_capital = rub_from_usd + rub_from_uzs

        # --- –†–∞—Å—á—ë—Ç –º–µ—Å—è—Ü–µ–≤ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π ---
    month_labels = [(start_date + timedelta(days=30 * i)).strftime('%B %Y') for i in range(12)]

    if 'savings_by_month' not in st.session_state:
        st.session_state.savings_by_month = {label: 0 for label in month_labels}

    # –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ)
    fig_plan = px.pie(
        names=month_labels,
        values=[monthly_plan_rub for _ in month_labels],
        title="–ü–ª–∞–Ω –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        hole=0.4
    )
    st.plotly_chart(fig_plan, use_container_width=True)

    pie_labels, pie_values, accumulated, remaining_to_goal, estimated_finish_date, percent_complete = recalculate_progress(goal_rub, start_capital, monthly_plan_rub, start_date)

    chart_placeholder = st.empty()
    filtered_labels = [label for label, value in zip(pie_labels, pie_values) if value > 0]
    filtered_values = [value for value in pie_values if value > 0]

    fig_pie = px.pie(
        names=["–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"] + [label for label, value in zip(filtered_labels, filtered_values) if value > 0] + ["–û—Å—Ç–∞—Ç–æ–∫"],
        values=[start_capital] + [value for value in filtered_values if value > 0] + [remaining_to_goal],
        title="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
        hole=0.4
    )
    chart_placeholder.plotly_chart(fig_pie, use_container_width=True)

    
    goal_placeholder = st.empty()
    goal_placeholder.markdown(...)

    
    # --- –ë–ª–æ–∫ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö ---
    with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"):
        if st.button("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"):
            st.session_state.savings_by_month = {label: 0 for label in month_labels}
            st.success("–î–∞–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")
            pie_labels, pie_values, accumulated, remaining_to_goal, estimated_finish_date, percent_complete = recalculate_progress(goal_rub, start_capital, monthly_plan_rub, start_date)
            fig_pie_reset = px.pie(
            names=["–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"] + [label for label, value in zip(pie_labels, pie_values) if value > 0] + ["–û—Å—Ç–∞—Ç–æ–∫"],
            values=[start_capital] + [value for label, value in zip(pie_labels, pie_values) if value > 0] + [remaining_to_goal],
                title="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞)",
                hole=0.4
            )
            chart_placeholder.plotly_chart(fig_pie_reset, use_container_width=True)
            goal_placeholder.markdown("""
            <div style='font-size:24px; font-weight:600; margin-top: 1.5rem;'>
                üéØ <b>–¶–µ–ª—å:</b> {:,.2f} ‚ÇΩ &nbsp;&nbsp;&nbsp;
                üíº <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {:,.2f} ‚ÇΩ &nbsp;&nbsp;&nbsp;
                üìà <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {:.2f}% &nbsp;&nbsp;&nbsp;
                üóìÔ∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</b> {}
            </div>
            """.format(goal_rub, remaining_to_goal, percent_complete, estimated_finish_date), unsafe_allow_html=True)

    # --- –ë–ª–æ–∫ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü ---
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü")
    with st.form(key="add_savings_form"):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            input_usd = st.number_input("–°—É–º–º–∞ –≤ USD", min_value=0.0, value=0.0, step=10.0)
        with col2:
            input_uzs = st.number_input("–°—É–º–º–∞ –≤ UZS", min_value=0.0, value=0.0, step=10000.0)
        with col3:
            input_rub = st.number_input("–°—É–º–º–∞ –≤ RUB", min_value=0.0, value=0.0, step=1000.0)
        with col4:
            selected_month = st.selectbox("–ú–µ—Å—è—Ü", month_labels)
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")

    if submitted:
        added_total = input_rub + input_usd * usd_rate + (input_uzs * uzs_rate) / 10000

        if selected_month in st.session_state.savings_by_month:
            st.session_state.savings_by_month[selected_month] += added_total

        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_total:,.2f} ‚ÇΩ –≤ {selected_month}")

        pie_labels, pie_values, accumulated, remaining_to_goal, estimated_finish_date, percent_complete = recalculate_progress(goal_rub, start_capital, monthly_plan_rub, start_date)

        fig_pie_updated = px.pie(
            names=["–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"] + [label for label, value in zip(pie_labels, pie_values) if value > 0] + ["–û—Å—Ç–∞—Ç–æ–∫"],
            values=[start_capital] + [value for label, value in zip(pie_labels, pie_values) if value > 0] + [remaining_to_goal],
            title="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)",
            hole=0.4
        )
        chart_placeholder.plotly_chart(fig_pie_updated, use_container_width=True)
        goal_placeholder.markdown("""
            <div style='font-size:24px; font-weight:600; margin-top: 1.5rem;'>
                üéØ <b>–¶–µ–ª—å:</b> {:,.2f} ‚ÇΩ &nbsp;&nbsp;&nbsp;
                üíº <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {:,.2f} ‚ÇΩ &nbsp;&nbsp;&nbsp;
                üìà <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {:.2f}% &nbsp;&nbsp;&nbsp;
                üóìÔ∏è <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</b> {}
            </div>
            """.format(goal_rub, remaining_to_goal, percent_complete, estimated_finish_date), unsafe_allow_html=True)

        
        

# --- –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º ---
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º")
    savings_table = pd.DataFrame({
        "–ú–µ—Å—è—Ü": month_labels,
        "–ü–ª–∞–Ω (‚ÇΩ)": [monthly_plan_rub for _ in month_labels],
        "–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)": [st.session_state.savings_by_month[label] for label in month_labels]
    })
    st.dataframe(savings_table.style.format({"–ü–ª–∞–Ω (‚ÇΩ)": "{:.2f}", "–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)": "{:.2f}"}), use_container_width=True)

if __name__ == "__main__":
    main()
